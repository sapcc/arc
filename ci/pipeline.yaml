pipeline_image: &pipeline_image
  image_resource:
    type: docker-image
    source:
      repository: docker.***REMOVED***/monsoon-concourse/arc-pipeline
      tag: 'current'
kubectl_image: &kubectl_image
  image_resource:
    type: docker-image
    source:
      repository: hub.***REMOVED***/monsoon/kubectl
      tag: 'v1.4.6'
deployment_command: &deployment_command
  run:
    path: sh
    args:
      - -ec
      - |
        tag=$(cat version/current)
        echo kubectl set image deployment/$DEPLOYMENT --namespace=$NAMESPACE $DEPLOYMENT=$REPOSITORY:$tag
        kubectl set image deployment/$DEPLOYMENT --namespace=$NAMESPACE $DEPLOYMENT=$REPOSITORY:$tag
        echo Waiting for deployment to succeed 
        STEP=${STEP:-2}
        TIMEOUT=${TIMEOUT:-60}
        sleep $STEP #give the deployment a little time
        until kubectl get deployment $DEPLOYMENT --namespace=$NAMESPACE -o json | \
                jq -e '.status | .unavailableReplicas == null and .replicas == .updatedReplicas' >/dev/null; do
          if [ $TIMEOUT -le 0 ]; then echo -e "\nTimeout waiting for deployment"; exit 1; fi 
          TIMEOUT=$((TIMEOUT-STEP))
          sleep $STEP 
          printf .
        done
        echo -e "\nDeployment completed"
groups:
  - name: master
    jobs:
      - arc-unit
      - arc-build
      - tests-build 
      - api-tests
      - api-build
      - pki-test
      - pki-build
      - mosquitto-build
      - mosquitto-staging
      - pki-staging
      - api-staging
      - staging-tests
      - release-stable
      - mosquitto-production
      - pki-production
      - api-production
      #- production-tests
  - name: website
    jobs:
      - arc-website
  - name: pullrequests
    jobs:
      - pr-test
jobs:
  - name: arc-website
    serial: true
    plan:
      - get: website.git
        trigger: true
      - task: deploy
        config:
          platform: 'linux'
          image_resource:
            type: docker-image
            source:
              repository: hub.***REMOVED***/monsoon/arc-website-builder
          inputs:
            - name: website.git
              path: source
          run:
            path: /deploy.sh
            args: [ source/website/ ]
          params:
            SSH_KEY: {{arc-deploy-key}}
  - name: arc-unit
    public: true
    plan:
      - get: arc.git
        trigger: true
      - aggregate:
        - task: metalint
          file: arc.git/ci/metalint.yaml
        - task: unit
          file: arc.git/ci/unit.yaml
  - name: pr-test
    public: true
    plan:
      - get: pullrequest
        trigger: true
      - get: arc.git
      - put: pullrequest
        params:
          path: pullrequest
          status: pending
      - aggregate:
        - task: metalint
          file: arc.git/ci/metalint.yaml
        - task: unit
          file: arc.git/ci/unit.yaml
        on_failure:
          put: pullrequest
          params:
            path: pullrequest
            status: failure
      - put: pullrequest
        params:
          path: pullrequest
          status: success

  - name: arc-build
    serial: true
    plan:
      - aggregate:
        - get: arc.git
          trigger: true
          passed: [ arc-unit ]
        - get: arc.version
          params: { bump: true }
      - task: compile
        file: arc.git/ci/build-arc.yaml
      - task: upload
        file: arc.git/ci/swift-upload.yaml
        params:
          CONTAINER: {{swift-container-beta}}
          OS_AUTH_URL: {{swift-auth_url}}
          OS_USERNAME: {{swift-username}}
          OS_PASSWORD: {{swift-api-key}}
          OS_USER_DOMAIN_NAME: {{swift-domain}}
          OS_PROJECT_ID: {{swift-project-id}}
      - put: arc.version
        params: { filename: arc.version/current}

  - name: tests-build
    plan:
      - aggregate:
        - get: tests.git
          trigger: true
        - get: tests.version
          params: { bump: true }
      - task: build
        file: tests.git/ci/build-tests.yaml
      - put: tests.image
        params:
          build: build/integration-tests
          tag: tests.version/current
          tag_as_latest: true
          cache: true
          cache_tag: latest
          build_args:
            http_proxy: http://proxy.***REMOVED***:8080
            https_proxy: http://proxy.***REMOVED***:8080
            no_proxy: ***REMOVED***,127.0.0.1,localhost
      - put: tests.version
        params: { filename: tests.version/current}

  - name: api-tests
    plan:
      - get: arc.git
        trigger: true
        passed: [ arc-unit ]
      - task: test
        file: arc.git/ci/api-tests.yaml

  - name: api-build
    plan:
      - aggregate:
        - get: arc.git
          trigger: true
          passed: [ api-tests ]
        - get: api.version
          params: { bump: true }
      - task: build
        file: arc.git/ci/build-api.yaml
      - put: api.image
        params:
          build: build/api-server
          tag: api.version/current
          tag_as_latest: true
          cache: true
          cache_tag: latest
          build_args:
            http_proxy: http://proxy.***REMOVED***:8080
            https_proxy: http://proxy.***REMOVED***:8080
            no_proxy: ***REMOVED***,127.0.0.1,localhost
      - put: api.version
        params: { filename: api.version/current}

  - name: pki-test
    plan:
      - get: pki.git
        trigger: true
      - task: test
        file: pki.git/ci/test.yaml
        input_mapping: { source: pki.git }

  - name: pki-build
    plan:
      - aggregate:
        - { get: pki.git, passed: [ pki-test ], trigger: true }
        - get: pki.version
          params: { bump: true }
      - task: build
        file: pki.git/ci/build.yaml
      - put: pki.image
        params:
          build: build
          tag: pki.version/current
          tag_as_latest: true
          cache: true
          cache_tag: latest
          build_args:
            http_proxy: http://proxy.***REMOVED***:8080
            https_proxy: http://proxy.***REMOVED***:8080
            no_proxy: ***REMOVED***,127.0.0.1,localhost
      - put: pki.version
        params: { filename: pki.version/current}


  - name: mosquitto-build
    plan:
      - aggregate:
        - get: mosquitto.git
          trigger: true
        - get: mosquitto.version
          params: { bump: true }
      - task: build-packages
        privileged: true
        file: mosquitto.git/ci/build-packages.yaml
        input_mapping:
          aport: mosquitto.git
        params: { SUBDIR: mosquitto}
      - put: mosquitto.image
        params:
          build: build
          tag: mosquitto.version/current
          tag_as_latest: true
          build_args:
            http_proxy: http://proxy.***REMOVED***:8080
            https_proxy: http://proxy.***REMOVED***:8080
            no_proxy: ***REMOVED***,127.0.0.1,localhost
          cache_tag: latest
          cache: true
      - put: mosquitto.version
        params:
          filename: mosquitto.version/current


  - name: mosquitto-staging
    serial: true
    plan:
      - aggregate:
        - { get: mosquitto.version, passed: [mosquitto-build], trigger: true }
        - { get: mosquitto.git, passed: [mosquitto-build] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: mosquitto.version
              path: version
          <<: *deployment_command
          params:
            REGION: staging
            GITHUB_TOKEN: {{github-access-token}}
            REPOSITORY: hub.***REMOVED***/monsoon/mosquitto
            NAMESPACE: arc
            DEPLOYMENT: mosquitto
  - name: pki-staging
    serial: true
    plan:
      - aggregate:
        - { get: pki.version, passed: [pki-build], trigger: true }
        - { get: pki.git, passed: [pki-build] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: pki.version
              path: version
          <<: *deployment_command
          params:
            REGION: staging
            GITHUB_TOKEN: {{github-access-token}}
            REPOSITORY: hub.***REMOVED***/monsoon/arc-pki
            NAMESPACE: arc
            DEPLOYMENT: pki
  - name: api-staging
    serial: true
    plan:
      - aggregate:
        - { get: api.version, passed: [api-build], trigger: true }
        - { get: arc.git, passed: [api-build] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: api.version
              path: version
          <<: *deployment_command
          params:
            REGION: staging
            GITHUB_TOKEN: {{github-access-token}}
            REPOSITORY: hub.***REMOVED***/monsoon/arc-api
            NAMESPACE: arc
            DEPLOYMENT: api
  - name: staging-tests
    serial: true
    plan:
      - aggregate:
        - { get: mosquitto.version, passed: [mosquitto-staging], trigger: true }
        - { get: mosquitto.git, passed: [mosquitto-staging] }
        - { get: api.version, passed: [api-staging], trigger: true }
        - { get: pki.version, passed: [pki-staging], trigger: true }
        - { get: pki.git, passed: [pki-staging] }
        - { get: tests.image, passed: [tests-build], trigger: true }
        - { get: arc.version, passed: [arc-build], trigger: true }
        - { get: arc.git, passed: [arc-build] }
      - task: tests
        image: tests.image
        config:
          platform: linux
          inputs:
            - name: api.version
            - name: arc.version
          run:
            path: "sh"
            args:
              - -exc
              - |
                API_VERSION=$(cat api.version/current)
                ARC_VERSION=$(cat arc.version/current)
                export API_VERSION ARC_VERSION
                run_tests.sh

          params:
            API_SERVER: https://arc.***REMOVED***
            KEYSTONE_ENDPOINT: https://identity.***REMOVED***:5000/v3
            DOMAIN: monsoon2
            PROJECT: Arc_Test
            USERNAME: arc_test
            PASSWORD: {{staging-tests-password}}

  - name: release-stable
    serial: true
    plan:
      - aggregate:
        - { get: arc.version, passed: [staging-tests], trigger: true }
        - { get: arc.git, passed: [staging-tests] }
      - task: swift-copy
        file: arc.git/ci/swift-copy.yaml
        params:
          CONTAINER: {{swift-container-stable}}
          SOURCE_CONTAINER: {{swift-container-beta}}
          OS_AUTH_URL: {{swift-auth_url}}
          OS_USERNAME: {{swift-username}}
          OS_PASSWORD: {{swift-api-key}}
          OS_USER_DOMAIN_NAME: {{swift-domain}}
          OS_PROJECT_ID: {{swift-project-id}}
  - name: mosquitto-production
    serial: true
    plan:
      - aggregate:
        - { get: mosquitto.version, passed: [staging-tests], trigger: true }
        - { get: mosquitto.git, passed: [staging-tests] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: mosquitto.version
          run:
            path: sh
            args:
              - -exc
              - |
                repository=docker.***REMOVED***/monsoon/mosquitto
                tag=$(cat mosquitto.version/current)
                kubectl rolling-update mosquitto --namespace=arc --image=$repository:$tag
          params:
            REGION: eu-de-1
            GITHUB_TOKEN: {{github-access-token}}
  - name: pki-production
    serial: true
    plan:
      - aggregate:
        - { get: pki.version, passed: [staging-tests], trigger: true }
        - { get: pki.git, passed: [staging-tests] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: pki.version
          run:
            path: sh
            args:
              - -exc
              - |
                repository=docker.***REMOVED***/monsoon/arc-pki
                tag=$(cat pki.version/current)
                kubectl rolling-update pki --namespace=arc --image=$repository:$tag
          params:
            REGION: eu-de-1
            GITHUB_TOKEN: {{github-access-token}}
  - name: api-production
    serial: true
    plan:
      - aggregate:
        - { get: api.version, passed: [staging-tests], trigger: true }
        - { get: arc.git, passed: [staging-tests] }
      - task: rolling-update
        config:
          platform: linux
          <<: *kubectl_image
          inputs:
            - name: api.version
          run:
            path: sh
            args:
              - -exc
              - |
                repository=docker.***REMOVED***/monsoon/arc-api
                tag=$(cat api.version/current)
                kubectl rolling-update api --namespace=arc --image=$repository:$tag
          params:
            REGION: eu-de-1
            GITHUB_TOKEN: {{github-access-token}}
  #- name: production-tests
  #  serial: true
  #  plan:
  #    - aggregate:
  #      - { get: mosquitto.image, passed: [mosquitto-production], trigger: true }
  #      - { get: mosquitto.version, passed: [mosquitto-production] }
  #      - { get: api.image, passed: [api-production], trigger: true }
  #      - { get: api.version, passed: [api-production] }
  #      - { get: pki.image, passed: [pki-production], trigger: true }
  #      - { get: pki.version, passed: [pki-production] }
  #      - { get: tests.image, trigger: true }
  #      - { get: arc.version, passed: [staging-tests], trigger: true }
  #    - task: tests
  #      privileged: true
  #      config:
  #        platform: linux
  #        image: docker://docker.***REMOVED***/monsoon-concourse/arc-pipeline#current
  #        inputs:
  #          - name: mosquitto.image
  #          - name: api.image
  #          - name: api.version
  #          - name: pki.image
  #          - name: pki.version
  #          - name: tests.image
  #          - name: arc.version
  #        run: { path: /tasks/production }
  #        params:
  #          API_SERVER: https://arc-production.***REMOVED***
  #          UPDATE_SERVER: http://arc-update-site-production.***REMOVED***:8080
  #          KEYSTONE_ENDPOINT: https://identity.***REMOVED***:5000/v3
  #          DOMAIN: sap_default
  #          PROJECT: D062284_sandbox
  #          USERNAME: arc_test
  #          PASSWORD: {{production-tests-password}}
  #    - aggregate:
  #      - put: mosquitto.image
  #        params: {tag: tests/mosquitto.image/newtag}
  #      - put: api.image
  #        params: {tag: tests/api.image/newtag}
  #      - put: update-site.image
  #        params: {tag: tests/update-site.image/newtag}
  #      - put: pki.image
  #        params: {tag: tests/pki.image/newtag}
  #      - put: tests.image
  #        params: {tag: tests/tests.image/newtag}

resources:
  - name: website.git
    type: git
    source:
      uri: git@gitHub.***REMOVED***:monsoon/arc.git
      branch: master
      private_key: {{arc-deploy-key}}
      paths: [ website/, ci/ ]
  - name: arc.git
    type: git
    source:
      uri: git://gitHub.***REMOVED***/monsoon/arc.git
      branch: master
      ignore_paths: [ website/, integration-tests/, update-server/ ]
  - name: tests.git
    type: git
    source:
      uri: git://gitHub.***REMOVED***/monsoon/arc.git
      branch: master
      paths: [ integration-tests/, ci/ ]
  - name: arc.version
    type: monsoon-version
    source:
      key:  arc
      initial:   "00010101"
      username:  {{swift-username}}
      api_key:    {{swift-api-key}}
      auth_url:  {{swift-auth_url}}
      domain:    {{swift-domain}}
      tenant_id: {{swift-project-id}}
      container: {{swift-container-version}}
  - name: api.image
    type: docker-image
    source:
      repository: hub.***REMOVED***/monsoon/arc-api
      username:   {{internal-registry-username}}
      password:   {{internal-registry-password}}
  - name: api.version
    type: monsoon-version
    source:
      key:  arc-api
      initial:   "00010101"
      username:  {{swift-username}}
      api_key:    {{swift-api-key}}
      auth_url:  {{swift-auth_url}}
      domain:    {{swift-domain}}
      tenant_id: {{swift-project-id}}
      container: {{swift-container-version}}
  - name: pki.git
    type: git
    source:
      uri: git://gitHub.***REMOVED***/monsoon/arc-pki.git
      branch: master
  - name: pki.image
    type: docker-image
    source:
      repository: hub.***REMOVED***/monsoon/arc-pki
      username:   {{internal-registry-username}}
      password:   {{internal-registry-password}}
  - name: pki.version
    type: monsoon-version
    source:
      key:  arc-pki
      initial:   "00010101"
      username:  {{swift-username}}
      api_key:    {{swift-api-key}}
      auth_url:  {{swift-auth_url}}
      domain:    {{swift-domain}}
      tenant_id: {{swift-project-id}}
      container: {{swift-container-version}}
  - name: mosquitto.git
    type: git
    source:
      uri: git://gitHub.***REMOVED***/monsoon/mosquitto.git
      branch: master
  - name: mosquitto.image
    type: docker-image
    source:
      repository: hub.***REMOVED***/monsoon/mosquitto
      username:   {{internal-registry-username}}
      password:   {{internal-registry-password}}
  - name: mosquitto.version
    type: monsoon-version
    source:
      key:  arc-mosquitto
      initial:   "00010101"
      username:  {{swift-username}}
      api_key:    {{swift-api-key}}
      auth_url:  {{swift-auth_url}}
      domain:    {{swift-domain}}
      tenant_id: {{swift-project-id}}
      container: {{swift-container-version}}
  - name: tests.image
    type: docker-image
    source:
      repository: hub.***REMOVED***/monsoon/arc-tests
      username:   {{internal-registry-username}}
      password:   {{internal-registry-password}}
  - name: tests.version
    type: monsoon-version
    source:
      key:  arc-tests
      initial:   "00010101"
      username:  {{swift-username}}
      api_key:    {{swift-api-key}}
      auth_url:  {{swift-auth_url}}
      domain:    {{swift-domain}}
      tenant_id: {{swift-project-id}}
      container: {{swift-container-version}}
  - name: pullrequest
    type: pullrequest
    check_every: 30s
    source:
      repo: monsoon/arc
      uri:  https://gitHub.***REMOVED***/monsoon/arc
      base_url: http://concourse.***REMOVED***:8080/
      api_endpoint: https://gitHub.***REMOVED***/api/v3
      access_token: {{github-access-token}}

resource_types:
  - name: monsoon-version
    type: docker-image
    source:
      repository: hub.***REMOVED***/concourse/monsoon-version
  - name: pullrequest
    type: docker-image
    source:
      repository: hub.***REMOVED***/concourse/pullrequest-resource
