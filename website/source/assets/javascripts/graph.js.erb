// defaults
var width = parseInt($(".jumbo-graph").css("width"));
var height = parseInt($(".jumbo-graph").css("height"));

var color = d3.scale.category10();

var force = d3.layout.force()
    .charge(-120)
    .linkDistance(125)
    .size([width, height]);

var svg = d3.select(".jumbo-graph").append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json("nodes.json", function(error, graph) {
  if (error) throw error;

  force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

  var link = svg.selectAll(".link")
    .data(graph.links)
    .enter().append("line")
    .attr("class", "link")
    .style("stroke", "white")
    .style("stroke-width", 3);

	var elem = svg.selectAll(".node").data(graph.nodes)
	//var elemEnter = elem.enter()
	//		.append("g");

  var client = svg
    .append("defs")
    .append("pattern")
    .attr("id", "client")
    .attr("patternUnits", "userSpaceOnUse")
    .attr("width", 40)
    .attr("height", 40)
    .attr("x", 20)
    .attr("y", 20)
    .append("image")
    .attr("xlink:href", "<%= url_for '/assets/images/client.png' %>")
    .attr("width", 40)
    .attr("height", 40)
    .attr("x", 0)
    .attr("y", 0);

  var broker = svg
    .append("defs")
    .append("pattern")
    .attr("id", "broker")
    .attr("patternUnits", "userSpaceOnUse")
    .attr("width", 70)
    .attr("height", 70)
    .attr("x", 35)
    .attr("y", 35)
    .append("image")
    .attr("xlink:href", "<%= url_for '/assets/images/broker.png' %>")
    .attr("width", 70)
    .attr("height", 70)
    .attr("x", 0)
    .attr("y", 0);

	var circle = elem.enter()
   .append("circle")
   .attr("class", "node")
   .attr("r",
      function(d){
        if(d.group == 2){
          return 20;
        }else if(d.group == 1){
          return 35;
        }
      })
   .style("stroke", "white")
   .style("stroke-width",
      function(d){
        if(d.group == 2){
          return 3;
        }else if(d.group == 1){
          return 3;
        }
      })
   .style("fill",
      function(d) {
       if(d.group == 2){
         return "url(#client)";
       }else if(d.group == 1){
         return "url(#broker)";
       }
   })
    .call(force.drag);

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
		
				circle.attr("transform", function(d){return "translate("+d.x+","+d.y+")"});
  });
});